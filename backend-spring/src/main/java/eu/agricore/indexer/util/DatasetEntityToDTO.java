package eu.agricore.indexer.util;

import java.util.ArrayList;
import java.util.List;

import eu.agricore.indexer.dto.AnalysisUnitDTO;
import eu.agricore.indexer.dto.DataServiceDTO;
import eu.agricore.indexer.dto.DatasetDTO;
import eu.agricore.indexer.dto.DatasetVariableDTO;
import eu.agricore.indexer.dto.DistributionDTO;
import eu.agricore.indexer.model.analysisunit.AnalysisUnit;
import eu.agricore.indexer.model.analysisunit.GeoreferencedAnalysisUnit;
import eu.agricore.indexer.model.analysisunit.SocioeconomicAnalysisUnit;
import eu.agricore.indexer.model.dataset.Dataset;
import eu.agricore.indexer.model.dataset.DatasetGenerationActivity;
import eu.agricore.indexer.model.dataset.DatasetReferencedResource;
import eu.agricore.indexer.model.dataset.Keyword;
import eu.agricore.indexer.model.datasetvariable.DatasetVariable;
import eu.agricore.indexer.model.datasetvariable.GeoreferencedDatasetVariable;
import eu.agricore.indexer.model.datasetvariable.PriceDatasetVariable;
import eu.agricore.indexer.model.datasetvariable.SocioeconomicDatasetVariable;
import eu.agricore.indexer.model.datasetvariable.VariableReferenceValue;
import eu.agricore.indexer.model.distribution.DataService;
import eu.agricore.indexer.model.distribution.DataServiceServedDataset;
import eu.agricore.indexer.model.distribution.Distribution;
import eu.agricore.indexer.model.vocabulary.VocabularyValue;

/**
 * Utility class to convert instances of the dataset entity to its DTO, hiding information not needed for GET requests
 * 
 * */
public final class DatasetEntityToDTO {
	
	/**
	 * Public static method
	 * Receives the dataset entity to be converted
	 * */
	public static DatasetDTO convertEntityToDTO(Dataset datasetEntity) {
		
		DatasetDTO datasetDTO = new DatasetDTO(); // DTO object initialisation
		
		// Dataset ID
		datasetDTO.setId(datasetEntity.getId());
		
		// Draft property
		datasetDTO.setDraft(datasetEntity.getDraft());
		
		// Creation and last update dates (in the database)
		datasetDTO.setCreationDateTime(datasetEntity.getCreationDateTime());
		datasetDTO.setLastUpdateDateTime(datasetEntity.getLastUpdateDateTime());
		
		// Creation and last update of the dataset and its content
		datasetDTO.setIssued(datasetEntity.getIssued());
		datasetDTO.setModified(datasetEntity.getModified());
		
		// Title
		datasetDTO.setTitle(datasetEntity.getTitle());
		
		// Description
		datasetDTO.setDescription(datasetEntity.getDescription());
		
		// Type (socioeconomic or georeferenced)
		datasetDTO.setDatasetType(datasetEntity.getDatasetType().toString());
		
		// Task or deliverable related
		if(datasetEntity.getWpTask() != null) datasetDTO.setWpTask(datasetEntity.getWpTask().getLabel());
		
		//Producer
		datasetDTO.setProducer(datasetEntity.getProducer());
		
		// Link
		datasetDTO.setLink(datasetEntity.getLink());
		
		// Languages
		List<String> languagesDTO = new ArrayList<String>();
		for (VocabularyValue language: datasetEntity.getLanguages()) {
			languagesDTO.add(language.getLabel());
		}
		datasetDTO.setLanguages(languagesDTO);
		
		// Periodicity
		if(datasetEntity.getPeriodicity() != null) datasetDTO.setPeriodicity(datasetEntity.getPeriodicity().getLabel());
		// Catalogue (id and title)
		if(datasetEntity.getCatalogue() != null) datasetDTO.setCatalogueId(datasetEntity.getCatalogue().getId());
		if(datasetEntity.getCatalogue() != null) datasetDTO.setCatalogueTitle(datasetEntity.getCatalogue().getTitle());
		// Spatial resolution
		datasetDTO.setSpatialResolutionInMeters(datasetEntity.getSpatialResolutionInMeters());
		// Temporal resolution
		datasetDTO.setTemporalResolution(datasetEntity.getTemporalResolution());
		
		// Was generated by
		List<String> wasGeneratedByDTO = new ArrayList<String>();
		for (DatasetGenerationActivity activity: datasetEntity.getWasGeneratedBy()) {
			wasGeneratedByDTO.add(activity.getLabel());
		}
		datasetDTO.setWasGeneratedBy(wasGeneratedByDTO);
		
		// Is referenced by
		List<String> isReferencedByDTO = new ArrayList<String>();
		for (DatasetReferencedResource resource: datasetEntity.getIsReferencedBy()) {
			isReferencedByDTO.add(resource.getLabel());
		}
		datasetDTO.setIsReferencedBy(isReferencedByDTO);
		
		// Resource type
		if(datasetEntity.getResourceType() != null) datasetDTO.setResourceType(datasetEntity.getResourceType().getLabel());
		
		// Temporal extent
		datasetDTO.setTmpExtentFrom(datasetEntity.getTmpExtentFrom());
		datasetDTO.setTmpExtentTo(datasetEntity.getTmpExtentTo());
		
		// Subjects
		List<String> subjectsDTO = new ArrayList<String>();
		for (VocabularyValue subject: datasetEntity.getSubjects()) {
			subjectsDTO.add(subject.getLabel());
		}
		datasetDTO.setSubjects(subjectsDTO);
		
		// Purposes
		List<String> purposesDTO = new ArrayList<String>();
		for (VocabularyValue purpose: datasetEntity.getPurposes()) {
			purposesDTO.add(purpose.getLabel());
		}
		datasetDTO.setPurposes(purposesDTO);
		
		// Themes
		List<String> themesDTO = new ArrayList<String>();
		for (VocabularyValue theme: datasetEntity.getThemes()) {
			themesDTO.add(theme.getLabel());
		}
		datasetDTO.setThemes(themesDTO);
		
		// Statistical representativeness
		datasetDTO.setStatsRepresentative(datasetEntity.getStatsRepresentative());
		
		// Aggregation level
		datasetDTO.setAggregationLevel(datasetEntity.getAggregationLevel());
		if(datasetEntity.getAggregationUnit() != null) datasetDTO.setAggregationUnit(datasetEntity.getAggregationUnit().getLabel());
		datasetDTO.setAggregationScale(datasetEntity.getAggregationScale());
		
		// Continents
		List<String> continentsDTO = new ArrayList<String>();
		for (VocabularyValue continent: datasetEntity.getContinentalCoverage()) {
			continentsDTO.add(continent.getLabel());
		}
		datasetDTO.setContinentalCoverage(continentsDTO);
		
		// Countries
		List<String> countriesDTO = new ArrayList<String>();
		for (VocabularyValue country: datasetEntity.getCountryCoverage()) {
			countriesDTO.add(country.getLabel());
		}
		datasetDTO.setCountryCoverage(countriesDTO);
		
		// NUTS
		List<String> nuts1DTO = new ArrayList<String>();
		for (VocabularyValue nuts1: datasetEntity.getNuts1()) {
			nuts1DTO.add(nuts1.getCode());
		}
		datasetDTO.setNuts1(nuts1DTO);
		
		List<String> nuts2DTO = new ArrayList<String>();
		for (VocabularyValue nuts2: datasetEntity.getNuts2()) {
			nuts2DTO.add(nuts2.getCode());
		}
		datasetDTO.setNuts2(nuts2DTO);
		
		List<String> nuts3DTO = new ArrayList<String>();
		for (VocabularyValue nuts3: datasetEntity.getNuts3()) {
			nuts3DTO.add(nuts3.getCode());
		}
		datasetDTO.setNuts3(nuts3DTO);
		
		// Geonames
		List<String> geonames1DTO = new ArrayList<String>();
		for (VocabularyValue adm1: datasetEntity.getAdm1()) {
			geonames1DTO.add(adm1.getLabel());
		}
		datasetDTO.setAdm1(geonames1DTO);

		List<String> geonames2DTO = new ArrayList<String>();
		for (VocabularyValue adm2: datasetEntity.getAdm2()) {
			geonames2DTO.add(adm2.getLabel());
		}
		datasetDTO.setAdm2(geonames2DTO);
		
		// Keywords
		List<String> keywordsDTO = new ArrayList<String>();
		for (Keyword keyword: datasetEntity.getKeywords()) {
			keywordsDTO.add(keyword.getLabel());
		}
		datasetDTO.setKeywords(keywordsDTO);
		
		// Complex entities
		datasetDTO.setDistributions(convertDistributionsToDTO(datasetEntity.getDistributions())); // Distributions
		datasetDTO.setAnalysisUnits(convertAnalysisUnitsToDTO(datasetEntity.getAnalysisUnits())); // Analysis units
		datasetDTO.setVariables(convertDatasetsVariablesToDTO(datasetEntity.getVariables())); // Variables
		datasetDTO.setKeywords(keywordsDTO);
		datasetDTO.setOwner(datasetEntity.getOwner());
		datasetDTO.setView(datasetEntity.getView());
		
		return datasetDTO;
	}

	/**
	 * Private static method, converts the dataset distributions to DTO
	 * */
	private static List<DistributionDTO> convertDistributionsToDTO(List<Distribution> distributions) {
		
		List<DistributionDTO> distributionsDTO = new ArrayList<DistributionDTO>(); // List of distribution DTOs
		for (Distribution distribution: distributions) {
			
			DistributionDTO distributionDTO = new DistributionDTO(); // New distribution DTO
			
			distributionDTO.setTitle(distribution.getTitle());
			distributionDTO.setDescription(distribution.getDescription());
			distributionDTO.setIssued(distribution.getIssued());
			distributionDTO.setModified(distribution.getModified());
			distributionDTO.setLicense(distribution.getLicense());
			if(distribution.getAccessRights() != null) distributionDTO.setAccessRights(distribution.getAccessRights().getLabel());
			distributionDTO.setAccessProcedures(distribution.getAccessProcedures());
			distributionDTO.setAccessUrl(distribution.getAccessUrl());
			distributionDTO.setDownloadUrl(distribution.getDownloadUrl());
			distributionDTO.setByteSize(distribution.getByteSize());
			if(distribution.getFormat() != null) distributionDTO.setFormat(distribution.getFormat().getLabel());
			if(distribution.getCompressFormat() != null) distributionDTO.setCompressFormat(distribution.getCompressFormat().getLabel());
			if(distribution.getPackagingFormat() != null) distributionDTO.setPackagingFormat(distribution.getPackagingFormat().getLabel());
			
			// Access service
			if(distribution.getAccessService() != null) {
				distributionDTO.setAccessService(convertDataServiceToDTO(distribution.getAccessService()));
			} else {
				distributionDTO.setAccessService(null); // If the distribution does not have any data service, set it to null
			}
			
			distributionsDTO.add(distributionDTO); // Add the distribution DTO to the list
		}
		
		return distributionsDTO;
	
	}
	
	/**
	 * Private static method, converts a data service to DTO
	 * */
	private static DataServiceDTO convertDataServiceToDTO(DataService dataService) {
		
		DataServiceDTO dataServiceDTO = new DataServiceDTO(); // New data service DTO
		
		dataServiceDTO.setTitle(dataService.getTitle());
		dataServiceDTO.setDescription(dataService.getDescription());
		
		dataServiceDTO.setIssued(dataService.getIssued());
		dataServiceDTO.setModified(dataService.getModified());
		dataServiceDTO.setCreator(dataService.getCreator());
		dataServiceDTO.setPublisher(dataService.getPublisher());
		if(dataService.getAccessRights() != null) dataServiceDTO.setAccessRights(dataService.getAccessRights().getLabel());
		dataServiceDTO.setEndpointUrl(dataService.getEndpointUrl());
		dataServiceDTO.setEndpointDescription(dataService.getEndpointDescription());
		
		List<String> servedDatasetsDTO = new ArrayList<String>();
		for (DataServiceServedDataset servedDataset: dataService.getServedDatasets()) {
			servedDatasetsDTO.add(servedDataset.getLabel());
		}
		dataServiceDTO.setServedDatasets(servedDatasetsDTO);
				
		return dataServiceDTO;
	}
	
	/**
	 * Private static method, converts the analysisUnits to DTO
	 * */
	private static List<AnalysisUnitDTO> convertAnalysisUnitsToDTO(List<AnalysisUnit> analysisUnits) {
		
		List<AnalysisUnitDTO> analysisUnitsDTO = new ArrayList<AnalysisUnitDTO>();
		
		for (AnalysisUnit au: analysisUnits) {
			
			if(au.getClass().getName().contains("Socioeconomic")) { // Its a socioeconomic unit of analysis
				
				SocioeconomicAnalysisUnit analysisUnit = (SocioeconomicAnalysisUnit) au;
				
				AnalysisUnitDTO analysisUnitDTO = new AnalysisUnitDTO();
				analysisUnitDTO.setUnitReference(analysisUnit.getUnitReference());
				analysisUnitDTO.setUnitAnalysisNumber(analysisUnit.getUnitAnalysisNumber());
				analysisUnitDTO.setTmpExtentFrom(analysisUnit.getTmpExtentFrom());
				analysisUnitDTO.setTmpExtentTo(analysisUnit.getTmpExtentTo());
				
				analysisUnitDTO.setAggregationLevel(analysisUnit.getAggregationLevel());
				if(analysisUnit.getAggregationUnit() != null) analysisUnitDTO.setAggregationUnit(analysisUnit.getAggregationUnit().getLabel());
				analysisUnitDTO.setAggregationScale(analysisUnit.getAggregationScale());
				analysisUnitDTO.setCensus(analysisUnit.getCensus());
				analysisUnitDTO.setPopulationCoverage(analysisUnit.getPopulationCoverage());
				analysisUnitDTO.setStatsRepresentativeness(analysisUnit.getStatsRepresentativeness());
				analysisUnitDTO.setDownscalingMethodology(analysisUnit.getDownscalingMethodology());
				
				analysisUnitsDTO.add(analysisUnitDTO);
			
			} else { // Its a georeferenced unit of analysis
				
				GeoreferencedAnalysisUnit analysisUnit = (GeoreferencedAnalysisUnit) au;
				
				AnalysisUnitDTO analysisUnitDTO = new AnalysisUnitDTO();
				analysisUnitDTO.setUnitReference(analysisUnit.getUnitReference());
				analysisUnitDTO.setUnitAnalysisNumber(analysisUnit.getUnitAnalysisNumber());
				analysisUnitDTO.setTmpExtentFrom(analysisUnit.getTmpExtentFrom());
				analysisUnitDTO.setTmpExtentTo(analysisUnit.getTmpExtentTo());
				
				analysisUnitDTO.setAggregationLevel(analysisUnit.getAggregationLevel());
				if(analysisUnit.getAggregationUnit() != null) analysisUnitDTO.setAggregationUnit(analysisUnit.getAggregationUnit().getLabel());
				analysisUnitDTO.setAggregationScale(analysisUnit.getAggregationScale());
				analysisUnitDTO.setCensus(analysisUnit.getCensus());
				analysisUnitDTO.setPopulationCoverage(analysisUnit.getPopulationCoverage());
				analysisUnitDTO.setStatsRepresentativeness(analysisUnit.getStatsRepresentativeness());
				analysisUnitDTO.setDownscalingMethodology(analysisUnit.getDownscalingMethodology());
				analysisUnitDTO.setAreaSizeValue(analysisUnit.getAreaSizeValue());
				if(analysisUnit.getAreaSizeUnit() != null) analysisUnitDTO.setAreaSizeUnit(analysisUnit.getAreaSizeUnit().getLabel());
				
				analysisUnitsDTO.add(analysisUnitDTO);
			}
		}
	
		return analysisUnitsDTO;
	}
	
	/**
	 * Private static method, converts the dataset variables to DTO
	 * */
	private static List<DatasetVariableDTO> convertDatasetsVariablesToDTO(List<DatasetVariable> variables) {
		
		List<DatasetVariableDTO> variablesDTO = new ArrayList<DatasetVariableDTO>();
		
		for (DatasetVariable v: variables) {
			
			if(v.getClass().getName().contains("Georeferenced")) { // Georeferenced variable
				
				GeoreferencedDatasetVariable variable = (GeoreferencedDatasetVariable) v;
				
				DatasetVariableDTO datasetVariableDTO = new DatasetVariableDTO();
				
				datasetVariableDTO.setName(variable.getName());
				datasetVariableDTO.setVariableType("Georeferenced variable");
				datasetVariableDTO.setMeasurementUnit(variable.getMeasurementUnit());
				datasetVariableDTO.setTmpExtentFrom(variable.getTmpExtentFrom());
				datasetVariableDTO.setTmpExtentTo(variable.getTmpExtentTo());
				if(variable.getDataOrigin() != null) datasetVariableDTO.setDataOrigin(variable.getDataOrigin().getLabel());
				
				// Ref. values
				List<String> referencedValuesDTO = new ArrayList<String>();
				for (VariableReferenceValue refValue: variable.getReferenceValues()) {
					referencedValuesDTO.add(refValue.getLabel());
				}
				datasetVariableDTO.setReferenceValues(referencedValuesDTO);
				
				if(variable.getFrequency() != null) datasetVariableDTO.setFrequency(variable.getFrequency().getLabel());
				if(variable.getFrequencyMathRep() != null) datasetVariableDTO.setFrequencyMathRep(variable.getFrequencyMathRep().getLabel());
				if(variable.getMathRepresentation() != null) datasetVariableDTO.setMathRepresentation(variable.getMathRepresentation().getLabel());
				datasetVariableDTO.setAggregationLevel(variable.getAggregationLevel());
				if(variable.getAggregationUnit() != null) datasetVariableDTO.setAggregationUnit(variable.getAggregationUnit().getLabel());
				datasetVariableDTO.setAggregationScale(variable.getAggregationScale());
				datasetVariableDTO.setStatsRepresentativeness(variable.getStatsRepresentativeness());
				datasetVariableDTO.setDownscalingMethodology(variable.getDownscalingMethodology());
						
				datasetVariableDTO.setAnalysisUnits(convertAnalysisUnitsToDTO(variable.getAnalysisUnits()));
				
				variablesDTO.add(datasetVariableDTO);
			
			} else if(v.getClass().getName().contains("Socioeconomic")) { // Socioeconomic unit of analysis
				
				SocioeconomicDatasetVariable variable = (SocioeconomicDatasetVariable) v;
				
				DatasetVariableDTO datasetVariableDTO = new DatasetVariableDTO();
				
				datasetVariableDTO.setName(variable.getName());
				datasetVariableDTO.setVariableType("Socioeconomic variable");
				datasetVariableDTO.setMeasurementUnit(variable.getMeasurementUnit());
				datasetVariableDTO.setTmpExtentFrom(variable.getTmpExtentFrom());
				datasetVariableDTO.setTmpExtentTo(variable.getTmpExtentTo());
				if(variable.getDataOrigin() != null) datasetVariableDTO.setDataOrigin(variable.getDataOrigin().getLabel());
				
				// Ref. values
				List<String> referencedValuesDTO = new ArrayList<String>();
				for (VariableReferenceValue refValue: variable.getReferenceValues()) {
					referencedValuesDTO.add(refValue.getLabel());
				}
				datasetVariableDTO.setReferenceValues(referencedValuesDTO);
				
				if(variable.getFrequency() != null) datasetVariableDTO.setFrequency(variable.getFrequency().getLabel());
				if(variable.getFrequencyMathRep() != null) datasetVariableDTO.setFrequencyMathRep(variable.getFrequencyMathRep().getLabel());
				if(variable.getMathRepresentation() != null) datasetVariableDTO.setMathRepresentation(variable.getMathRepresentation().getLabel());
				datasetVariableDTO.setAggregationLevel(variable.getAggregationLevel());
				if(variable.getAggregationUnit() != null) datasetVariableDTO.setAggregationUnit(variable.getAggregationUnit().getLabel());
				datasetVariableDTO.setAggregationScale(variable.getAggregationScale());
				datasetVariableDTO.setStatsRepresentativeness(variable.getStatsRepresentativeness());
				datasetVariableDTO.setDownscalingMethodology(variable.getDownscalingMethodology());
						
				datasetVariableDTO.setAnalysisUnits(convertAnalysisUnitsToDTO(variable.getAnalysisUnits()));
				
				variablesDTO.add(datasetVariableDTO);
				
			} else { // Price variable
				
				PriceDatasetVariable variable = (PriceDatasetVariable) v;
				
				DatasetVariableDTO datasetVariableDTO = new DatasetVariableDTO();
				
				datasetVariableDTO.setName(variable.getName());
				datasetVariableDTO.setVariableType("Price variable");
				datasetVariableDTO.setMeasurementUnit(variable.getMeasurementUnit());
				datasetVariableDTO.setTmpExtentFrom(variable.getTmpExtentFrom());
				datasetVariableDTO.setTmpExtentTo(variable.getTmpExtentTo());
				if(variable.getDataOrigin() != null) datasetVariableDTO.setDataOrigin(variable.getDataOrigin().getLabel());
				
				// Ref. values
				List<String> referencedValuesDTO = new ArrayList<String>();
				for (VariableReferenceValue refValue: variable.getReferenceValues()) {
					referencedValuesDTO.add(refValue.getLabel());
				}
				datasetVariableDTO.setReferenceValues(referencedValuesDTO);
				
				if(variable.getFrequency() != null) datasetVariableDTO.setFrequency(variable.getFrequency().getLabel());
				if(variable.getFrequencyMathRep() != null) datasetVariableDTO.setFrequencyMathRep(variable.getFrequencyMathRep().getLabel());
				if(variable.getMathRepresentation() != null) datasetVariableDTO.setMathRepresentation(variable.getMathRepresentation().getLabel());
				datasetVariableDTO.setAggregationLevel(variable.getAggregationLevel());
				if(variable.getAggregationUnit() != null) datasetVariableDTO.setAggregationUnit(variable.getAggregationUnit().getLabel());
				datasetVariableDTO.setAggregationScale(variable.getAggregationScale());
				datasetVariableDTO.setStatsRepresentativeness(variable.getStatsRepresentativeness());
				datasetVariableDTO.setDownscalingMethodology(variable.getDownscalingMethodology());
				if(variable.getCurrency() != null) datasetVariableDTO.setCurrency(variable.getCurrency().getLabel());
				if(variable.getPriceType() != null) datasetVariableDTO.setPriceType(variable.getPriceType().getLabel());
				datasetVariableDTO.setSizeUnitAmount(variable.getSizeUnitAmount());
				if(variable.getSizeUnit() != null) datasetVariableDTO.setSizeUnit(variable.getSizeUnit().getLabel());
						
				datasetVariableDTO.setAnalysisUnits(convertAnalysisUnitsToDTO(variable.getAnalysisUnits()));
				
				variablesDTO.add(datasetVariableDTO);
				
			}
		}
		
		return variablesDTO;
	}

}
